itertools return generators : thus convert to list when iterating


from itertools import permutations

# Get all permutations of [1, 2, 3] 
perm = permutations([1, 2, 3])  #returns list of tuples
for i in list(perm): 
    print (i)
output:
(1, 2, 3)
(1, 3, 2)
(2, 1, 3) etc etc

# Get all permutations of length 2 
perm = permutations([1, 2, 3], 2)
output:
(1, 2)
(1, 3) etc etc continued


from itertools import combinations

# Get all combinations of [1, 2, 3] of length 2
comb = combinations([1, 2, 3], 2)
for i in list(comb):
    print (i)
output:
(1, 2)
(1, 3)
(2, 3)


from itertools import combinations_with_replacement 
 
# Get all combinations of [1, 2, 3] and length 2 
comb = combinations_with_replacement([1, 2, 3], 2) 
output:
(1, 1)
(1, 2)
(1, 3)
(2, 2)
(2, 3)
(3, 3) 

#Get all possible combinations of a list
def all_combinations(lst):
    # Generate all combinations of all lengths
    return [comb for r in range(1, len(lst) + 1) for comb in itertools.combinations(lst, r)]

my_combinations = all_combinations([1,2,3])


