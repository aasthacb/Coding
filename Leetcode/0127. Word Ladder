#DIDNT UNDERSTAND SOLN YET PLS REVISIT

from collections import deque, defaultdict

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        if endWord not in wordList:
            return 0
        
        # Preprocess wordList to build a map of transformations
        wordMap = defaultdict(list)
        wordLen = len(beginWord)
        for word in wordList:
            for i in range(wordLen):
                pattern = word[:i] + '*' + word[i+1:]
                wordMap[pattern].append(word)
        
        # BFS setup
        queue = deque([(beginWord, 1)])
        visited = set([beginWord])
        
        while queue:
            current_word, level = queue.popleft()
            
            for i in range(wordLen):
                pattern = current_word[:i] + '*' + current_word[i+1:]
                for next_word in wordMap[pattern]:
                    if next_word == endWord:
                        return level + 1
                    if next_word not in visited:
                        visited.add(next_word)
                        queue.append((next_word, level + 1))
        
        return 0
