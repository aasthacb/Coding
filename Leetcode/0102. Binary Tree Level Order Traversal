# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

#LEVEL ORDER TRAVERSAL IS BASICALLY THE VISITED LIST FOR BFS IN A BINARY TREE
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None : return []
        
        visited = []
        queue = [root]

        def bfs(queue,visited):
            while(len(queue)>0):
                curr_level = []
                level_size = len(queue)
                for _ in range(level_size):
                    node = queue.pop(0)
                    curr_level.append(node.val)
                    if node.left is not None: queue.append(node.left)
                    if node.right is not None: queue.append(node.right)
                visited.append(curr_level)

            return visited

        return bfs(queue,visited)

    

        
