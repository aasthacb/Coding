# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        #IMPLEMENTING LEVEL ORDER TRAVERSAL
        if root is None: return []
        queue = [root]
        
        def bfs(queue,right_side_view):
            while(len(queue)>0):
                curr_level = []
                level_size = len(queue)
                for _ in range(level_size):
                    node = queue.pop(0)
                    curr_level.append(node.val)
                    if node.left is not None : queue.append(node.left)
                    if node.right is not None: queue.append(node.right)

                right_side_view.append(curr_level[-1])
            return right_side_view

        right_side_view = bfs(queue,[])
        return right_side_view

        
        
