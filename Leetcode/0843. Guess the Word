https://leetcode.com/problems/guess-the-word/description/?envType=study-plan-v2&envId=google-spring-23-high-frequency

# """
# This is Master's API interface.
# You should not implement it, or speculate about its implementation
# """
#class Master(object):
#    def guess(self, word):
#        """
#        :type word: str
#        :rtype int
#        """

class Solution(object):
    def find_matches(self,word1,word2):
        count = 0
        for i in range(6):
            if word1[i] == word2[i]:
                count += 1
        return count

    def findSecretWord(self, words, master):
        """
        :type words: List[Str]
        :type master: Master
        :rtype: None
        """
        #finding most common word by calcing sum of matches with every other word in words
        while(len(words) >=  1):
            guessed_word = None
            max_common = 0
            for word in words:
                common_count = sum(self.find_matches(word, other_word) for other_word in words)
                if common_count > max_common:
                    max_common = common_count
                    guessed_word = word
            
            matches = master.guess(guessed_word)

            if matches == 6 :
                print("returning")
                return words[-1]
           # maxmatches = max(matches,maxmatches)
            #x = words[0]
            #print(len(words))
            #words = words[:0] #first word not the secret word (further optimise)
            #print(len(words))
            words = [word1 for word1 in words if self.find_matches(word1,guessed_word) == matches and word1 != guessed_word]
            
            print(len(words))
            
        
