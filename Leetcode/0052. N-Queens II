class Solution(object):
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """

        board = [['.'] *n for i in range(n)]
        columns = set()
        positive_diagonals = set()
        negative_diagonals = set()
        res = []

        def backtrack(row):
            if row == n : #one queen placed in each row => valid solution
                copy = ["".join(row) for row in board]
                res.append(copy)

            for col in range(n):
                if col in columns or row+col in positive_diagonals or row-col in negative_diagonals:
                    continue

                columns.add(col)
                positive_diagonals.add(row+col)
                negative_diagonals.add(row-col)
                board[row][col] = 'Q'

                backtrack(row+1)

                columns.remove(col)
                positive_diagonals.remove(row+col)
                negative_diagonals.remove(row-col)
                board[row][col] = '.'

        backtrack(0)
        return len(res)
        
